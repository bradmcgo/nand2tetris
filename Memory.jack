// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack
/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array memory;
    static Array freeList;
    static int heapBase;
    static int heapSize;
    /** Initializes the class. */
    function void init() {
        let memory = 0;
        let heapBase = 2048;
        let heapSize = 14335;
        let freeList = heapBase;
        let heapBase[0] = 0;
        let heapBase[1] = heapSize;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return memory[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let memory[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int address;
        var Array segmentList;
        let address = 0;
        let segmentList = freeList;

        while (address = 0) {
            if ((segmentList[1] > (size + 2)) | (segmentList[1] = (size + 2))) {
                let address = segmentList + segmentList[1] - size;
                let memory[address - 1] = size;
                let segmentList[1] = segmentList[1] - (size + 2);
            }
            else {
                let segmentList = segmentList[0];
            }
        }
        return address;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        let memory[o - 2] = freeList;
        let freeList = o - 2;
        return;
    }    
}
